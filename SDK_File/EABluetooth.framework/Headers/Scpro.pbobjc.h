// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scpro.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class SCPT_Activity;
@class SCPT_ActivityCount;
@class SCPT_AdcDebugCmd;
@class SCPT_AgpsRequest;
@class SCPT_Battery;
@class SCPT_BindingInfo;
@class SCPT_BleMac;
@class SCPT_BodyTemperatureCount;
@class SCPT_BodyTemperatureData;
@class SCPT_BodyTemperatureMonitor;
@class SCPT_Brightness;
@class SCPT_CallControl;
@class SCPT_Camera;
@class SCPT_CameraControll;
@class SCPT_Data;
@class SCPT_Drinkwater;
@class SCPT_FactoryTestCmd;
@class SCPT_FlashRead;
@class SCPT_Format;
@class SCPT_Goal;
@class SCPT_GpsDebug;
@class SCPT_Heartrate;
@class SCPT_HeartrateCount;
@class SCPT_HeartrateMonitor;
@class SCPT_HeartrateRealtime;
@class SCPT_Language;
@class SCPT_Menstrual;
@class SCPT_Music;
@class SCPT_MusicContrl;
@class SCPT_Notification;
@class SCPT_NotificationSwitches;
@class SCPT_NotificationSwitches_Config;
@class SCPT_NstDebugCmd;
@class SCPT_OtaInfo;
@class SCPT_ReadRequest;
@class SCPT_ReadRequest_Param;
@class SCPT_Remind;
@class SCPT_RemindCount;
@class SCPT_RemindDel;
@class SCPT_Response;
@class SCPT_ScreenTime;
@class SCPT_Sedentary;
@class SCPT_SerialNumber;
@class SCPT_Sleep;
@class SCPT_SleepCount;
@class SCPT_SmsReplySet;
@class SCPT_SmsReplySet_Sms;
@class SCPT_SmsSend;
@class SCPT_SpO2Count;
@class SCPT_SpO2Data;
@class SCPT_StressCount;
@class SCPT_StressData;
@class SCPT_Switches;
@class SCPT_Time;
@class SCPT_UserInfo;
@class SCPT_Version;
@class SCPT_Vibration;
@class SCPT_WashHands;
@class SCPT_Watchface;
@class SCPT_WatchfaceList;
@class SCPT_Weather;
@class SCPT_Weather_Day;
@class SCPT_WorkoutDatCnt;
@class SCPT_WorkoutDetail;
@class SCPT_WorkoutDetailCnt;
@class SCPT_WorkoutResult;
@class SCPT_WriteRequest;
@class SCPT_WriteRequest_Param;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SCPT_Code

typedef GPB_ENUM(SCPT_Code) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Code_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SCPT_Code_Unspecified = 0,
  SCPT_Code_Time = 1,
  SCPT_Code_SerialNumber = 2,
  SCPT_Code_Version = 3,
  SCPT_Code_Format = 4,
  SCPT_Code_Watchface = 5,
  SCPT_Code_Brightness = 6,
  SCPT_Code_ScreenTime = 7,
  SCPT_Code_Battery = 8,
  SCPT_Code_Vibration = 9,
  SCPT_Code_Language = 10,
  SCPT_Code_UserInfo = 11,
  SCPT_Code_Goal = 12,
  SCPT_Code_Activity = 13,
  SCPT_Code_ActivityCount = 14,
  SCPT_Code_Sleep = 15,
  SCPT_Code_SleepCount = 16,
  SCPT_Code_Heartrate = 17,
  SCPT_Code_HeartrateCount = 18,
  SCPT_Code_HeartrateMonitor = 19,
  SCPT_Code_Sedentary = 20,
  SCPT_Code_Weather = 21,
  SCPT_Code_Notification = 22,
  SCPT_Code_Switches = 23,
  SCPT_Code_BindingInfo = 24,

  /** 恢复出厂设置，没有data */
  SCPT_Code_Reset = 25,

  /** 初始化/查询OTA数据信息 */
  SCPT_Code_OtaInfo = 26,

  /** OTA回应，只用于Response */
  SCPT_Code_OtaAck = 27,

  /** GPS测试 */
  SCPT_Code_GpsDebug = 28,
  SCPT_Code_NotifySwitches = 29,
  SCPT_Code_BodyTemperatureMonitor = 30,
  SCPT_Code_BodyTemperatureData = 31,
  SCPT_Code_BodyTemperatureCount = 32,
  SCPT_Code_Spo2Data = 33,
  SCPT_Code_Spo2Count = 34,
  SCPT_Code_StressData = 35,
  SCPT_Code_StressCount = 36,
  SCPT_Code_WashHands = 37,
  SCPT_Code_RemindAdd = 38,
  SCPT_Code_RemindDel = 39,
  SCPT_Code_RemindEdit = 40,
  SCPT_Code_RemindCheck = 41,
  SCPT_Code_BleMac = 42,
  SCPT_Code_Music = 43,
  SCPT_Code_MusicContrl = 44,
  SCPT_Code_SmsReplySet = 45,
  SCPT_Code_SmsSend = 46,
  SCPT_Code_Menstrual = 47,
  SCPT_Code_Workout = 48,
  SCPT_Code_FindPhone = 49,
  SCPT_Code_WeatheCheck = 50,
  SCPT_Code_CallControl = 51,
  SCPT_Code_WorkoutCount = 52,
  SCPT_Code_WorkoutData = 53,
  SCPT_Code_WorkoutDetailCnt = 54,
  SCPT_Code_FactoryTest = 55,
  SCPT_Code_FlashRead = 56,
  SCPT_Code_AdcDebug = 57,
  SCPT_Code_NstDebug = 58,
  SCPT_Code_ClearLog = 59,
  SCPT_Code_HeartrateRealtime = 60,
  SCPT_Code_Camera = 61,
  SCPT_Code_CameraControll = 62,
  SCPT_Code_AgpsReq = 63,
  SCPT_Code_AgpsChk = 64,

  /** 自定义和在线表盘id列表 */
  SCPT_Code_WatchfaceList = 65,

  /** 喝水提醒 */
  SCPT_Code_DrinkWater = 66,
};

GPBEnumDescriptor *SCPT_Code_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Code_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_WorkoutType

/** 运动类型定义 */
typedef GPB_ENUM(SCPT_WorkoutType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_WorkoutType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 室外步行 */
  SCPT_WorkoutType_OutdoorWalking = 0,

  /** 室外跑步 */
  SCPT_WorkoutType_OutdoorRunning = 1,

  /** 室外游泳 */
  SCPT_WorkoutType_OutdoorSwimming = 2,

  /** 室外骑行 */
  SCPT_WorkoutType_OutdoorCycling = 3,

  /** 越野运动 */
  SCPT_WorkoutType_CrossCountry = 4,

  /** 徒步 */
  SCPT_WorkoutType_Hiking = 5,

  /** 攀爬登山 */
  SCPT_WorkoutType_Climbing = 6,

  /** 锻炼 */
  SCPT_WorkoutType_WorkoutT = 7,

  /** 室内步行 */
  SCPT_WorkoutType_IndoorWalking = 8,

  /** 室内跑步 */
  SCPT_WorkoutType_IndoorRunning = 9,

  /** 室内游泳 */
  SCPT_WorkoutType_IndoorSwimming = 10,

  /** 室内骑行 */
  SCPT_WorkoutType_IndoorCycling = 11,

  /** 椭圆机 */
  SCPT_WorkoutType_Elliptical = 12,

  /** 划船机 */
  SCPT_WorkoutType_RowingMachine = 13,

  /** 瑜伽 */
  SCPT_WorkoutType_Yoga = 14,
};

GPBEnumDescriptor *SCPT_WorkoutType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_WorkoutType_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_WorkoutGoalType

/** 运动目标定义 */
typedef GPB_ENUM(SCPT_WorkoutGoalType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_WorkoutGoalType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 没有设置运动目标 */
  SCPT_WorkoutGoalType_WorkoutgoalNull = 0,

  /** 步数 */
  SCPT_WorkoutGoalType_WorkoutgoalStep = 1,

  /** 卡路里 */
  SCPT_WorkoutGoalType_WorkoutgoalCal = 2,

  /** 距离 */
  SCPT_WorkoutGoalType_WorkoutgoalDist = 3,

  /** 时长 */
  SCPT_WorkoutGoalType_WorkoutgoalDura = 4,
};

GPBEnumDescriptor *SCPT_WorkoutGoalType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_WorkoutGoalType_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_StrokeType

/** 泳姿定义 */
typedef GPB_ENUM(SCPT_StrokeType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_StrokeType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 自由泳 */
  SCPT_StrokeType_Freestyle = 0,

  /** 蛙泳 */
  SCPT_StrokeType_Breaststroke = 1,

  /** 仰泳 */
  SCPT_StrokeType_Backstroke = 2,

  /** 蝶泳 */
  SCPT_StrokeType_Butterfly = 3,

  /** 犬泳 */
  SCPT_StrokeType_Dog = 4,

  /** 划船机 */
  SCPT_StrokeType_Rowing = 5,
};

GPBEnumDescriptor *SCPT_StrokeType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_StrokeType_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_NotificationType

typedef GPB_ENUM(SCPT_NotificationType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_NotificationType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 社交 */
  SCPT_NotificationType_Social = 0,

  /** 短信 */
  SCPT_NotificationType_Sms = 1,

  /** 邮件 */
  SCPT_NotificationType_Email = 2,

  /** 日程 */
  SCPT_NotificationType_Schedule = 3,

  /** 来电 */
  SCPT_NotificationType_IncomingCall = 4,

  /** 挂断 */
  SCPT_NotificationType_HangUp = 5,

  /** 未接来电 */
  SCPT_NotificationType_MissedCall = 6,
  SCPT_NotificationType_Wechat = 7,
  SCPT_NotificationType_Qq = 8,
  SCPT_NotificationType_Whatsapp = 9,
  SCPT_NotificationType_Facebook = 10,
  SCPT_NotificationType_Twitter = 11,
  SCPT_NotificationType_Gmail = 12,
  SCPT_NotificationType_Snapechat = 13,
  SCPT_NotificationType_Skype = 14,
  SCPT_NotificationType_Line = 15,
  SCPT_NotificationType_Instagram = 16,
  SCPT_NotificationType_Tumblr = 17,
  SCPT_NotificationType_Pinterest = 18,
  SCPT_NotificationType_Linkedin = 19,
  SCPT_NotificationType_Reddit = 20,
  SCPT_NotificationType_Tinder = 21,
  SCPT_NotificationType_Vkontakte = 22,
  SCPT_NotificationType_Amazon = 23,
  SCPT_NotificationType_Flipkar = 24,
  SCPT_NotificationType_Gpay = 25,
  SCPT_NotificationType_Hotstar = 26,
  SCPT_NotificationType_Messenger = 27,
  SCPT_NotificationType_Netflix = 28,
  SCPT_NotificationType_Ola = 29,
  SCPT_NotificationType_Outlook = 30,
  SCPT_NotificationType_Paytm = 31,
  SCPT_NotificationType_Phonepe = 32,
  SCPT_NotificationType_Primevideo = 33,
  SCPT_NotificationType_Uber = 34,
  SCPT_NotificationType_Youtube = 35,
  SCPT_NotificationType_Zomato = 36,
  SCPT_NotificationType_Swiggy = 37,
};

GPBEnumDescriptor *SCPT_NotificationType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_NotificationType_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_Response_Result

typedef GPB_ENUM(SCPT_Response_Result) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Response_Result_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SCPT_Response_Result_Succeed = 0,
  SCPT_Response_Result_Fail = 1,

  /** 2k数据接收成功 */
  SCPT_Response_Result_Rx2KSuccess = 2,

  /** 2k数据接收失败 */
  SCPT_Response_Result_Rx2KFail = 3,

  /** 固件数据全部接收成功 */
  SCPT_Response_Result_RxAllSuccess = 4,

  /** 固件数据全部接收失败 */
  SCPT_Response_Result_RxAllFail = 5,

  /** 当前状态不允许OTA */
  SCPT_Response_Result_OtaForbidden = 6,

  /** 固件数据无效 */
  SCPT_Response_Result_FwInvalid = 7,

  /** 提醒时间冲突 */
  SCPT_Response_Result_RemindTimErr = 8,

  /** 提醒周期冲突 */
  SCPT_Response_Result_RemindCycErr = 9,

  /** 提醒数量超过最大允许 */
  SCPT_Response_Result_RemindMaxErr = 10,

  /** 提醒ID错误 */
  SCPT_Response_Result_RemindIdErr = 11,

  /** 锻炼进行中 */
  SCPT_Response_Result_WorkoutRunning = 12,
};

GPBEnumDescriptor *SCPT_Response_Result_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Response_Result_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_WorkoutDetail_StateType

/** 运动状态心率区间 */
typedef GPB_ENUM(SCPT_WorkoutDetail_StateType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_WorkoutDetail_StateType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SCPT_WorkoutDetail_StateType_Unknown = 0,
  SCPT_WorkoutDetail_StateType_Normal = 1,

  /** 热身 */
  SCPT_WorkoutDetail_StateType_WarmUp = 2,

  /** 燃脂 */
  SCPT_WorkoutDetail_StateType_FatBurning = 3,

  /** 有氧 */
  SCPT_WorkoutDetail_StateType_Aerobic = 4,

  /** 无氧 */
  SCPT_WorkoutDetail_StateType_Anaerobic = 5,

  /** 极限 */
  SCPT_WorkoutDetail_StateType_Limit = 6,
};

GPBEnumDescriptor *SCPT_WorkoutDetail_StateType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_WorkoutDetail_StateType_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_MusicContrl_Type

/** 音乐控制状态 */
typedef GPB_ENUM(SCPT_MusicContrl_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_MusicContrl_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 播放 */
  SCPT_MusicContrl_Type_Play = 0,

  /** 暂停 */
  SCPT_MusicContrl_Type_Pause = 1,

  /** 下一曲 */
  SCPT_MusicContrl_Type_Next = 2,

  /** 上一曲 */
  SCPT_MusicContrl_Type_Last = 3,

  /** 音量+ */
  SCPT_MusicContrl_Type_VolIncrease = 4,

  /** 音量- */
  SCPT_MusicContrl_Type_VolReduce = 5,
  SCPT_MusicContrl_Type_Check = 6,
};

GPBEnumDescriptor *SCPT_MusicContrl_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_MusicContrl_Type_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_Remind_Type

typedef GPB_ENUM(SCPT_Remind_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Remind_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 吃饭[eat] */
  SCPT_Remind_Type_Eat = 0,

  /** 吃药[take pills] */
  SCPT_Remind_Type_Pills = 1,

  /** 喝水[drinkwater] */
  SCPT_Remind_Type_Drink = 2,

  /** 睡觉[sleep] */
  SCPT_Remind_Type_Sleep = 3,

  /** 运动[sport] */
  SCPT_Remind_Type_Sport = 4,

  /** 会议[meeting] */
  SCPT_Remind_Type_Meeting = 5,

  /** 账单 */
  SCPT_Remind_Type_Bills = 6,

  /** 闹钟 */
  SCPT_Remind_Type_Alarm = 7,

  /** 遛狗 */
  SCPT_Remind_Type_Walkdog = 8,

  /** 自定义[custom] */
  SCPT_Remind_Type_Custom = 9,
};

GPBEnumDescriptor *SCPT_Remind_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Remind_Type_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_Format_Time

typedef GPB_ENUM(SCPT_Format_Time) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Format_Time_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 不改变 */
  SCPT_Format_Time_TimeUnspecified = 0,

  /** 12小时制 */
  SCPT_Format_Time_Hour12 = 1,

  /** 24小时制 */
  SCPT_Format_Time_Hour24 = 2,
};

GPBEnumDescriptor *SCPT_Format_Time_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Format_Time_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_Format_Temperature

typedef GPB_ENUM(SCPT_Format_Temperature) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Format_Temperature_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 不改变 */
  SCPT_Format_Temperature_TemperatureUnspecified = 0,

  /** 摄氏度 */
  SCPT_Format_Temperature_Centigrade = 1,

  /** 华氏度 */
  SCPT_Format_Temperature_Fahrenheit = 2,
};

GPBEnumDescriptor *SCPT_Format_Temperature_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Format_Temperature_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_Format_Distance

typedef GPB_ENUM(SCPT_Format_Distance) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Format_Distance_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 不改变 */
  SCPT_Format_Distance_DistanceUnspecified = 0,

  /** 公制 */
  SCPT_Format_Distance_Metric = 1,

  /** 英制 */
  SCPT_Format_Distance_Imperial = 2,
};

GPBEnumDescriptor *SCPT_Format_Distance_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Format_Distance_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_Format_Weather

typedef GPB_ENUM(SCPT_Format_Weather) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Format_Weather_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 不改变 */
  SCPT_Format_Weather_WeatherUnspecified = 0,

  /** 摄氏度 */
  SCPT_Format_Weather_WeatherCentigrade = 1,

  /** 华氏度 */
  SCPT_Format_Weather_WeatherFahrenheit = 2,
};

GPBEnumDescriptor *SCPT_Format_Weather_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Format_Weather_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_Language_Type

typedef GPB_ENUM(SCPT_Language_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Language_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SCPT_Language_Type_English = 0,
  SCPT_Language_Type_ChineseSimplified = 1,
  SCPT_Language_Type_ChineseTraditional = 2,
};

GPBEnumDescriptor *SCPT_Language_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Language_Type_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_Sleep_Type

typedef GPB_ENUM(SCPT_Sleep_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Sleep_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 深睡 */
  SCPT_Sleep_Type_DeepSleep = 0,

  /** 浅睡 */
  SCPT_Sleep_Type_LightSleep = 1,

  /** 醒来 */
  SCPT_Sleep_Type_Awake = 2,

  /** 快速眼动 */
  SCPT_Sleep_Type_Rem = 5,

  /** 进入睡眠 */
  SCPT_Sleep_Type_EnterSleep = 16,

  /** 退出睡眠 */
  SCPT_Sleep_Type_ExitSleep = 17,
};

GPBEnumDescriptor *SCPT_Sleep_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Sleep_Type_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_Weather_Type

typedef GPB_ENUM(SCPT_Weather_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Weather_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SCPT_Weather_Type_Unknown = 0,

  /** 阴天 */
  SCPT_Weather_Type_Cloudy = 1,

  /** 晴 */
  SCPT_Weather_Type_Sunny = 2,

  /** 雨 */
  SCPT_Weather_Type_Rainy = 3,

  /** 雪 */
  SCPT_Weather_Type_Snowy = 4,

  /** 雾 */
  SCPT_Weather_Type_Fog = 5,

  /** 雾霾 */
  SCPT_Weather_Type_Haze = 6,

  /** 多云 */
  SCPT_Weather_Type_Partly = 7,

  /** 风 */
  SCPT_Weather_Type_Wind = 8,

  /** 暴雨 */
  SCPT_Weather_Type_StormRain = 9,

  /** 暴雪 */
  SCPT_Weather_Type_StormSnow = 10,
};

GPBEnumDescriptor *SCPT_Weather_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Weather_Type_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_Weather_TypeWind

typedef GPB_ENUM(SCPT_Weather_TypeWind) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Weather_TypeWind_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 北 */
  SCPT_Weather_TypeWind_N = 0,

  /** 东北东 */
  SCPT_Weather_TypeWind_Nne = 1,

  /** 东北 */
  SCPT_Weather_TypeWind_Ne = 2,

  /** 东东北 */
  SCPT_Weather_TypeWind_Ene = 3,

  /** 东 */
  SCPT_Weather_TypeWind_E = 4,

  /** 东东南 */
  SCPT_Weather_TypeWind_Ese = 5,

  /** 东南 */
  SCPT_Weather_TypeWind_Se = 6,

  /** 南东南 */
  SCPT_Weather_TypeWind_Sse = 7,

  /** 南 */
  SCPT_Weather_TypeWind_S = 8,

  /** 南西南 */
  SCPT_Weather_TypeWind_Ssw = 9,

  /** 西南 */
  SCPT_Weather_TypeWind_Sw = 10,

  /** 西西南 */
  SCPT_Weather_TypeWind_Wsw = 11,

  /** 西 */
  SCPT_Weather_TypeWind_W = 12,

  /** 西西北 */
  SCPT_Weather_TypeWind_Wnw = 13,

  /** 西北 */
  SCPT_Weather_TypeWind_Nw = 14,

  /** 北西北 */
  SCPT_Weather_TypeWind_Nnw = 15,
};

GPBEnumDescriptor *SCPT_Weather_TypeWind_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Weather_TypeWind_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_Switches_State

typedef GPB_ENUM(SCPT_Switches_State) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Switches_State_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 不改变 */
  SCPT_Switches_State_StateUnspecified = 0,

  /** 开 */
  SCPT_Switches_State_On = 1,

  /** 关 */
  SCPT_Switches_State_Off = 2,
};

GPBEnumDescriptor *SCPT_Switches_State_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Switches_State_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_OtaInfo_Type

typedef GPB_ENUM(SCPT_OtaInfo_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_OtaInfo_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** APOLLO3P固件 */
  SCPT_OtaInfo_Type_Apollo3P = 0,

  /** 触摸固件 */
  SCPT_OtaInfo_Type_Tp = 1,

  /** 心率固件 */
  SCPT_OtaInfo_Type_Hr = 2,

  /** GPS固件 */
  SCPT_OtaInfo_Type_Gpsf1 = 3,

  /** GPS固件 */
  SCPT_OtaInfo_Type_Gpsf2 = 4,

  /** GPS固件 */
  SCPT_OtaInfo_Type_Gpsf3 = 5,

  /** GPS固件 */
  SCPT_OtaInfo_Type_Gpsf4 = 6,

  /** AGPS数据 */
  SCPT_OtaInfo_Type_Agps = 7,

  /** 图库 */
  SCPT_OtaInfo_Type_Picture = 8,

  /** 表盘 */
  SCPT_OtaInfo_Type_Watchface = 9,
};

GPBEnumDescriptor *SCPT_OtaInfo_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_OtaInfo_Type_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_GpsDebug_Type

typedef GPB_ENUM(SCPT_GpsDebug_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_GpsDebug_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SCPT_GpsDebug_Type_PowerOn = 0,
  SCPT_GpsDebug_Type_PowerOff = 1,

  /** 进入IDLE模式 */
  SCPT_GpsDebug_Type_Idle = 2,

  /** 冷启动 */
  SCPT_GpsDebug_Type_Cold = 3,

  /** 热启动 */
  SCPT_GpsDebug_Type_Warm = 4,

  /** 热启动 */
  SCPT_GpsDebug_Type_Hot = 5,

  /** 卫星系统选择GPS */
  SCPT_GpsDebug_Type_GnsGps = 6,

  /** 卫星系统选择GLONASS */
  SCPT_GpsDebug_Type_GnsGlo = 7,

  /** 卫星系统选择GPS+GLONASS */
  SCPT_GpsDebug_Type_GnsHydGpGl = 8,

  /** 卫星系统选择北斗 */
  SCPT_GpsDebug_Type_GnsBd = 9,

  /** 卫星系统选择GPS+北斗 */
  SCPT_GpsDebug_Type_GnsHydGpBd = 10,

  /** 卫星系统选择Galileo */
  SCPT_GpsDebug_Type_GnsGal = 11,

  /** 卫星系统选择GPS+Galileo */
  SCPT_GpsDebug_Type_GnsHydGpGa = 12,
};

GPBEnumDescriptor *SCPT_GpsDebug_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_GpsDebug_Type_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_CallControl_Type

typedef GPB_ENUM(SCPT_CallControl_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_CallControl_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 挂断 */
  SCPT_CallControl_Type_HangUp = 0,

  /** 忽略 */
  SCPT_CallControl_Type_Ignore = 1,
};

GPBEnumDescriptor *SCPT_CallControl_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_CallControl_Type_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_Camera_State

typedef GPB_ENUM(SCPT_Camera_State) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_Camera_State_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SCPT_Camera_State_Closed = 0,
  SCPT_Camera_State_Ready = 1,
};

GPBEnumDescriptor *SCPT_Camera_State_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_Camera_State_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_CameraControll_Type

typedef GPB_ENUM(SCPT_CameraControll_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_CameraControll_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 拍照 */
  SCPT_CameraControll_Type_Shot = 0,
};

GPBEnumDescriptor *SCPT_CameraControll_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_CameraControll_Type_IsValidValue(int32_t value);

#pragma mark - Enum SCPT_AgpsRequest_Type

typedef GPB_ENUM(SCPT_AgpsRequest_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SCPT_AgpsRequest_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SCPT_AgpsRequest_Type_AgpsInvalid = 0,
  SCPT_AgpsRequest_Type_AgpsValid = 1,
};

GPBEnumDescriptor *SCPT_AgpsRequest_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SCPT_AgpsRequest_Type_IsValidValue(int32_t value);

#pragma mark - SCPT_ScproRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface SCPT_ScproRoot : GPBRootObject
@end

#pragma mark - SCPT_Pro

typedef GPB_ENUM(SCPT_Pro_FieldNumber) {
  SCPT_Pro_FieldNumber_ReadRequest = 1,
  SCPT_Pro_FieldNumber_WriteRequest = 2,
  SCPT_Pro_FieldNumber_Response = 3,
};

typedef GPB_ENUM(SCPT_Pro_Opt_OneOfCase) {
  SCPT_Pro_Opt_OneOfCase_GPBUnsetOneOfCase = 0,
  SCPT_Pro_Opt_OneOfCase_ReadRequest = 1,
  SCPT_Pro_Opt_OneOfCase_WriteRequest = 2,
  SCPT_Pro_Opt_OneOfCase_Response = 3,
};

GPB_FINAL @interface SCPT_Pro : GPBMessage

@property(nonatomic, readonly) SCPT_Pro_Opt_OneOfCase optOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_ReadRequest *readRequest;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_WriteRequest *writeRequest;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Response *response;

@end

/**
 * Clears whatever value was set for the oneof 'opt'.
 **/
void SCPT_Pro_ClearOptOneOfCase(SCPT_Pro *message);

#pragma mark - SCPT_ReadRequest

typedef GPB_ENUM(SCPT_ReadRequest_FieldNumber) {
  SCPT_ReadRequest_FieldNumber_Code = 1,
  SCPT_ReadRequest_FieldNumber_Param = 2,
};

GPB_FINAL @interface SCPT_ReadRequest : GPBMessage

@property(nonatomic, readwrite) SCPT_Code code;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_ReadRequest_Param *param;
/** Test to see if @c param has been set. */
@property(nonatomic, readwrite) BOOL hasParam;

@end

/**
 * Fetches the raw value of a @c SCPT_ReadRequest's @c code property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_ReadRequest_Code_RawValue(SCPT_ReadRequest *message);
/**
 * Sets the raw value of an @c SCPT_ReadRequest's @c code property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_ReadRequest_Code_RawValue(SCPT_ReadRequest *message, int32_t value);

#pragma mark - SCPT_ReadRequest_Param

typedef GPB_ENUM(SCPT_ReadRequest_Param_FieldNumber) {
  SCPT_ReadRequest_Param_FieldNumber_WorkoutDatId = 1,
  SCPT_ReadRequest_Param_FieldNumber_FlashRead = 2,
};

typedef GPB_ENUM(SCPT_ReadRequest_Param_Opt_OneOfCase) {
  SCPT_ReadRequest_Param_Opt_OneOfCase_GPBUnsetOneOfCase = 0,
  SCPT_ReadRequest_Param_Opt_OneOfCase_WorkoutDatId = 1,
  SCPT_ReadRequest_Param_Opt_OneOfCase_FlashRead = 2,
};

GPB_FINAL @interface SCPT_ReadRequest_Param : GPBMessage

@property(nonatomic, readonly) SCPT_ReadRequest_Param_Opt_OneOfCase optOneOfCase;

@property(nonatomic, readwrite) uint32_t workoutDatId;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_FlashRead *flashRead;

@end

/**
 * Clears whatever value was set for the oneof 'opt'.
 **/
void SCPT_ReadRequest_Param_ClearOptOneOfCase(SCPT_ReadRequest_Param *message);

#pragma mark - SCPT_WriteRequest

typedef GPB_ENUM(SCPT_WriteRequest_FieldNumber) {
  SCPT_WriteRequest_FieldNumber_Code = 1,
  SCPT_WriteRequest_FieldNumber_Data_p = 2,
  SCPT_WriteRequest_FieldNumber_Param = 3,
};

GPB_FINAL @interface SCPT_WriteRequest : GPBMessage

@property(nonatomic, readwrite) SCPT_Code code;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Data *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_WriteRequest_Param *param;
/** Test to see if @c param has been set. */
@property(nonatomic, readwrite) BOOL hasParam;

@end

/**
 * Fetches the raw value of a @c SCPT_WriteRequest's @c code property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_WriteRequest_Code_RawValue(SCPT_WriteRequest *message);
/**
 * Sets the raw value of an @c SCPT_WriteRequest's @c code property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_WriteRequest_Code_RawValue(SCPT_WriteRequest *message, int32_t value);

#pragma mark - SCPT_WriteRequest_Param

typedef GPB_ENUM(SCPT_WriteRequest_Param_FieldNumber) {
  SCPT_WriteRequest_Param_FieldNumber_Test = 1,
  SCPT_WriteRequest_Param_FieldNumber_ClearData = 2,
};

typedef GPB_ENUM(SCPT_WriteRequest_Param_Opt_OneOfCase) {
  SCPT_WriteRequest_Param_Opt_OneOfCase_GPBUnsetOneOfCase = 0,
  SCPT_WriteRequest_Param_Opt_OneOfCase_Test = 1,
  SCPT_WriteRequest_Param_Opt_OneOfCase_ClearData = 2,
};

GPB_FINAL @interface SCPT_WriteRequest_Param : GPBMessage

@property(nonatomic, readonly) SCPT_WriteRequest_Param_Opt_OneOfCase optOneOfCase;

@property(nonatomic, readwrite) uint32_t test;

/** 用于BindingInfo，是否清除手表数据 */
@property(nonatomic, readwrite) BOOL clearData;

@end

/**
 * Clears whatever value was set for the oneof 'opt'.
 **/
void SCPT_WriteRequest_Param_ClearOptOneOfCase(SCPT_WriteRequest_Param *message);

#pragma mark - SCPT_Response

typedef GPB_ENUM(SCPT_Response_FieldNumber) {
  SCPT_Response_FieldNumber_Code = 1,
  SCPT_Response_FieldNumber_Result = 2,
  SCPT_Response_FieldNumber_Data_p = 3,
};

GPB_FINAL @interface SCPT_Response : GPBMessage

@property(nonatomic, readwrite) SCPT_Code code;

@property(nonatomic, readwrite) SCPT_Response_Result result;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Data *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

/**
 * Fetches the raw value of a @c SCPT_Response's @c code property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Response_Code_RawValue(SCPT_Response *message);
/**
 * Sets the raw value of an @c SCPT_Response's @c code property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Response_Code_RawValue(SCPT_Response *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Response's @c result property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Response_Result_RawValue(SCPT_Response *message);
/**
 * Sets the raw value of an @c SCPT_Response's @c result property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Response_Result_RawValue(SCPT_Response *message, int32_t value);

#pragma mark - SCPT_Data

typedef GPB_ENUM(SCPT_Data_FieldNumber) {
  SCPT_Data_FieldNumber_SerialNumber = 1,
  SCPT_Data_FieldNumber_Version = 2,
  SCPT_Data_FieldNumber_Time = 3,
  SCPT_Data_FieldNumber_Format = 4,
  SCPT_Data_FieldNumber_Watchface = 5,
  SCPT_Data_FieldNumber_Brightness = 6,
  SCPT_Data_FieldNumber_ScreenTime = 7,
  SCPT_Data_FieldNumber_Battery = 8,
  SCPT_Data_FieldNumber_Vibration = 9,
  SCPT_Data_FieldNumber_Language = 10,
  SCPT_Data_FieldNumber_UserInfo = 11,
  SCPT_Data_FieldNumber_Goal = 12,
  SCPT_Data_FieldNumber_Activity = 13,
  SCPT_Data_FieldNumber_ActivityCount = 14,
  SCPT_Data_FieldNumber_Sleep = 15,
  SCPT_Data_FieldNumber_SleepCount = 16,
  SCPT_Data_FieldNumber_Heartrate = 17,
  SCPT_Data_FieldNumber_HeartrateCount = 18,
  SCPT_Data_FieldNumber_HeartrateMonitor = 19,
  SCPT_Data_FieldNumber_Sedentary = 20,
  SCPT_Data_FieldNumber_Weather = 21,
  SCPT_Data_FieldNumber_Notification = 22,
  SCPT_Data_FieldNumber_Switches = 23,
  SCPT_Data_FieldNumber_BindingInfo = 24,
  SCPT_Data_FieldNumber_OtaInfo = 26,
  SCPT_Data_FieldNumber_GpsDebug = 27,
  SCPT_Data_FieldNumber_NotifySw = 28,
  SCPT_Data_FieldNumber_BodyTemperature = 29,
  SCPT_Data_FieldNumber_BodyTempData = 30,
  SCPT_Data_FieldNumber_BodyTempCount = 31,
  SCPT_Data_FieldNumber_Spo2Data = 32,
  SCPT_Data_FieldNumber_Spo2Count = 33,
  SCPT_Data_FieldNumber_StressData = 34,
  SCPT_Data_FieldNumber_StressCount = 35,
  SCPT_Data_FieldNumber_WashHans = 36,
  SCPT_Data_FieldNumber_RemindAdd = 37,
  SCPT_Data_FieldNumber_RemindDel = 38,
  SCPT_Data_FieldNumber_RemindCount = 39,
  SCPT_Data_FieldNumber_BleMac = 40,
  SCPT_Data_FieldNumber_Music = 41,
  SCPT_Data_FieldNumber_MusicContrl = 42,
  SCPT_Data_FieldNumber_SmsReplySet = 43,
  SCPT_Data_FieldNumber_SmsSend = 44,
  SCPT_Data_FieldNumber_Menstrual = 45,
  SCPT_Data_FieldNumber_WorkoutDetailT = 46,
  SCPT_Data_FieldNumber_WorkoutResultT = 47,
  SCPT_Data_FieldNumber_RemindEdit = 48,
  SCPT_Data_FieldNumber_RemindCheck = 49,
  SCPT_Data_FieldNumber_CallControll = 50,
  SCPT_Data_FieldNumber_WorkoutDatCnt = 51,
  SCPT_Data_FieldNumber_WorkoutDetailCnt = 52,
  SCPT_Data_FieldNumber_FactoryTestCmd = 53,
  SCPT_Data_FieldNumber_AdcDebugCmd = 54,
  SCPT_Data_FieldNumber_NstDebugCmd = 55,
  SCPT_Data_FieldNumber_HeartrateRealtime = 56,
  SCPT_Data_FieldNumber_Camera = 57,
  SCPT_Data_FieldNumber_CameraControll = 58,
  SCPT_Data_FieldNumber_AgpsCmd = 59,
  SCPT_Data_FieldNumber_WatchfaceList = 60,
  SCPT_Data_FieldNumber_DrinkWater = 61,
};

typedef GPB_ENUM(SCPT_Data_Opt_OneOfCase) {
  SCPT_Data_Opt_OneOfCase_GPBUnsetOneOfCase = 0,
  SCPT_Data_Opt_OneOfCase_SerialNumber = 1,
  SCPT_Data_Opt_OneOfCase_Version = 2,
  SCPT_Data_Opt_OneOfCase_Time = 3,
  SCPT_Data_Opt_OneOfCase_Format = 4,
  SCPT_Data_Opt_OneOfCase_Watchface = 5,
  SCPT_Data_Opt_OneOfCase_Brightness = 6,
  SCPT_Data_Opt_OneOfCase_ScreenTime = 7,
  SCPT_Data_Opt_OneOfCase_Battery = 8,
  SCPT_Data_Opt_OneOfCase_Vibration = 9,
  SCPT_Data_Opt_OneOfCase_Language = 10,
  SCPT_Data_Opt_OneOfCase_UserInfo = 11,
  SCPT_Data_Opt_OneOfCase_Goal = 12,
  SCPT_Data_Opt_OneOfCase_Activity = 13,
  SCPT_Data_Opt_OneOfCase_ActivityCount = 14,
  SCPT_Data_Opt_OneOfCase_Sleep = 15,
  SCPT_Data_Opt_OneOfCase_SleepCount = 16,
  SCPT_Data_Opt_OneOfCase_Heartrate = 17,
  SCPT_Data_Opt_OneOfCase_HeartrateCount = 18,
  SCPT_Data_Opt_OneOfCase_HeartrateMonitor = 19,
  SCPT_Data_Opt_OneOfCase_Sedentary = 20,
  SCPT_Data_Opt_OneOfCase_Weather = 21,
  SCPT_Data_Opt_OneOfCase_Notification = 22,
  SCPT_Data_Opt_OneOfCase_Switches = 23,
  SCPT_Data_Opt_OneOfCase_BindingInfo = 24,
  SCPT_Data_Opt_OneOfCase_OtaInfo = 26,
  SCPT_Data_Opt_OneOfCase_GpsDebug = 27,
  SCPT_Data_Opt_OneOfCase_NotifySw = 28,
  SCPT_Data_Opt_OneOfCase_BodyTemperature = 29,
  SCPT_Data_Opt_OneOfCase_BodyTempData = 30,
  SCPT_Data_Opt_OneOfCase_BodyTempCount = 31,
  SCPT_Data_Opt_OneOfCase_Spo2Data = 32,
  SCPT_Data_Opt_OneOfCase_Spo2Count = 33,
  SCPT_Data_Opt_OneOfCase_StressData = 34,
  SCPT_Data_Opt_OneOfCase_StressCount = 35,
  SCPT_Data_Opt_OneOfCase_WashHans = 36,
  SCPT_Data_Opt_OneOfCase_RemindAdd = 37,
  SCPT_Data_Opt_OneOfCase_RemindDel = 38,
  SCPT_Data_Opt_OneOfCase_RemindCount = 39,
  SCPT_Data_Opt_OneOfCase_BleMac = 40,
  SCPT_Data_Opt_OneOfCase_Music = 41,
  SCPT_Data_Opt_OneOfCase_MusicContrl = 42,
  SCPT_Data_Opt_OneOfCase_SmsReplySet = 43,
  SCPT_Data_Opt_OneOfCase_SmsSend = 44,
  SCPT_Data_Opt_OneOfCase_Menstrual = 45,
  SCPT_Data_Opt_OneOfCase_WorkoutDetailT = 46,
  SCPT_Data_Opt_OneOfCase_WorkoutResultT = 47,
  SCPT_Data_Opt_OneOfCase_RemindEdit = 48,
  SCPT_Data_Opt_OneOfCase_RemindCheck = 49,
  SCPT_Data_Opt_OneOfCase_CallControll = 50,
  SCPT_Data_Opt_OneOfCase_WorkoutDatCnt = 51,
  SCPT_Data_Opt_OneOfCase_WorkoutDetailCnt = 52,
  SCPT_Data_Opt_OneOfCase_FactoryTestCmd = 53,
  SCPT_Data_Opt_OneOfCase_AdcDebugCmd = 54,
  SCPT_Data_Opt_OneOfCase_NstDebugCmd = 55,
  SCPT_Data_Opt_OneOfCase_HeartrateRealtime = 56,
  SCPT_Data_Opt_OneOfCase_Camera = 57,
  SCPT_Data_Opt_OneOfCase_CameraControll = 58,
  SCPT_Data_Opt_OneOfCase_AgpsCmd = 59,
  SCPT_Data_Opt_OneOfCase_WatchfaceList = 60,
  SCPT_Data_Opt_OneOfCase_DrinkWater = 61,
};

GPB_FINAL @interface SCPT_Data : GPBMessage

@property(nonatomic, readonly) SCPT_Data_Opt_OneOfCase optOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_SerialNumber *serialNumber;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Version *version;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Time *time;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Format *format;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Watchface *watchface;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Brightness *brightness;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_ScreenTime *screenTime;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Battery *battery;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Vibration *vibration;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Language *language;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_UserInfo *userInfo;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Goal *goal;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Activity *activity;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_ActivityCount *activityCount;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Sleep *sleep;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_SleepCount *sleepCount;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Heartrate *heartrate;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_HeartrateCount *heartrateCount;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_HeartrateMonitor *heartrateMonitor;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Sedentary *sedentary;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Weather *weather;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Notification *notification;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Switches *switches;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_BindingInfo *bindingInfo;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_OtaInfo *otaInfo;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_GpsDebug *gpsDebug;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_NotificationSwitches *notifySw;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_BodyTemperatureMonitor *bodyTemperature;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_BodyTemperatureData *bodyTempData;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_BodyTemperatureCount *bodyTempCount;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_SpO2Data *spo2Data;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_SpO2Count *spo2Count;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_StressData *stressData;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_StressCount *stressCount;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_WashHands *washHans;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Remind *remindAdd;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_RemindDel *remindDel;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_RemindCount *remindCount;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_BleMac *bleMac;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Music *music;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_MusicContrl *musicContrl;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_SmsReplySet *smsReplySet;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_SmsSend *smsSend;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Menstrual *menstrual;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_WorkoutDetail *workoutDetailT;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_WorkoutResult *workoutResultT;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Remind *remindEdit;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Remind *remindCheck;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_CallControl *callControll;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_WorkoutDatCnt *workoutDatCnt;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_WorkoutDetailCnt *workoutDetailCnt;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_FactoryTestCmd *factoryTestCmd;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_AdcDebugCmd *adcDebugCmd;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_NstDebugCmd *nstDebugCmd;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_HeartrateRealtime *heartrateRealtime;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Camera *camera;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_CameraControll *cameraControll;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_AgpsRequest *agpsCmd;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_WatchfaceList *watchfaceList;

@property(nonatomic, readwrite, strong, null_resettable) SCPT_Drinkwater *drinkWater;

@end

/**
 * Clears whatever value was set for the oneof 'opt'.
 **/
void SCPT_Data_ClearOptOneOfCase(SCPT_Data *message);

#pragma mark - SCPT_WorkoutDetail

typedef GPB_ENUM(SCPT_WorkoutDetail_FieldNumber) {
  SCPT_WorkoutDetail_FieldNumber_Id_p = 1,
  SCPT_WorkoutDetail_FieldNumber_Type = 2,
  SCPT_WorkoutDetail_FieldNumber_Timestamp = 3,
  SCPT_WorkoutDetail_FieldNumber_State = 4,
  SCPT_WorkoutDetail_FieldNumber_Cal = 5,
  SCPT_WorkoutDetail_FieldNumber_Duration = 6,
  SCPT_WorkoutDetail_FieldNumber_Steps = 7,
  SCPT_WorkoutDetail_FieldNumber_Distance = 8,
  SCPT_WorkoutDetail_FieldNumber_Hr = 9,
  SCPT_WorkoutDetail_FieldNumber_Speed = 10,
  SCPT_WorkoutDetail_FieldNumber_Pace = 11,
  SCPT_WorkoutDetail_FieldNumber_StepFre = 12,
  SCPT_WorkoutDetail_FieldNumber_Climb = 13,
  SCPT_WorkoutDetail_FieldNumber_StrokeCount = 14,
  SCPT_WorkoutDetail_FieldNumber_StrokeFre = 15,
  SCPT_WorkoutDetail_FieldNumber_Stroke = 16,
  SCPT_WorkoutDetail_FieldNumber_Lap = 17,
  SCPT_WorkoutDetail_FieldNumber_Longitude = 18,
  SCPT_WorkoutDetail_FieldNumber_Latitude = 19,
};

/**
 * 运动详情数据
 **/
GPB_FINAL @interface SCPT_WorkoutDetail : GPBMessage

/** 数据ID 与结果数据对应 */
@property(nonatomic, readwrite) uint32_t id_p;

/** 运动类型 */
@property(nonatomic, readwrite) SCPT_WorkoutType type;

/** 时间戳 */
@property(nonatomic, readwrite) uint32_t timestamp;

/** 运动状态 */
@property(nonatomic, readwrite) SCPT_WorkoutDetail_StateType state;

/** 卡路里 */
@property(nonatomic, readwrite) uint32_t cal;

/** 运动时长 */
@property(nonatomic, readwrite) uint32_t duration;

/** 步数 */
@property(nonatomic, readwrite) uint32_t steps;

/** 距离 */
@property(nonatomic, readwrite) uint32_t distance;

/** 心率 */
@property(nonatomic, readwrite) uint32_t hr;

/** 速度 */
@property(nonatomic, readwrite) uint32_t speed;

/** 配速 */
@property(nonatomic, readwrite) uint32_t pace;

/** 步频 */
@property(nonatomic, readwrite) uint32_t stepFre;

/** 爬升 */
@property(nonatomic, readwrite) uint32_t climb;

/** 划水频次 */
@property(nonatomic, readwrite) uint32_t strokeCount;

/** 划水频次 */
@property(nonatomic, readwrite) uint32_t strokeFre;

/** 泳姿 */
@property(nonatomic, readwrite) SCPT_StrokeType stroke;

/** 圈数(趟数) */
@property(nonatomic, readwrite) uint32_t lap;

/** GPS经度 */
@property(nonatomic, readwrite) uint32_t longitude;

/** GPS纬度 */
@property(nonatomic, readwrite) uint32_t latitude;

@end

/**
 * Fetches the raw value of a @c SCPT_WorkoutDetail's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_WorkoutDetail_Type_RawValue(SCPT_WorkoutDetail *message);
/**
 * Sets the raw value of an @c SCPT_WorkoutDetail's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_WorkoutDetail_Type_RawValue(SCPT_WorkoutDetail *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_WorkoutDetail's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_WorkoutDetail_State_RawValue(SCPT_WorkoutDetail *message);
/**
 * Sets the raw value of an @c SCPT_WorkoutDetail's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_WorkoutDetail_State_RawValue(SCPT_WorkoutDetail *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_WorkoutDetail's @c stroke property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_WorkoutDetail_Stroke_RawValue(SCPT_WorkoutDetail *message);
/**
 * Sets the raw value of an @c SCPT_WorkoutDetail's @c stroke property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_WorkoutDetail_Stroke_RawValue(SCPT_WorkoutDetail *message, int32_t value);

#pragma mark - SCPT_WorkoutResult

typedef GPB_ENUM(SCPT_WorkoutResult_FieldNumber) {
  SCPT_WorkoutResult_FieldNumber_Id_p = 1,
  SCPT_WorkoutResult_FieldNumber_Type = 2,
  SCPT_WorkoutResult_FieldNumber_StartTimestamp = 3,
  SCPT_WorkoutResult_FieldNumber_EndTimestamp = 4,
  SCPT_WorkoutResult_FieldNumber_GoalCal = 5,
  SCPT_WorkoutResult_FieldNumber_GoalDuration = 6,
  SCPT_WorkoutResult_FieldNumber_GoalSteps = 7,
  SCPT_WorkoutResult_FieldNumber_GoalDistance = 8,
  SCPT_WorkoutResult_FieldNumber_Cal = 9,
  SCPT_WorkoutResult_FieldNumber_Duration = 10,
  SCPT_WorkoutResult_FieldNumber_Steps = 11,
  SCPT_WorkoutResult_FieldNumber_Distance = 12,
  SCPT_WorkoutResult_FieldNumber_Hr = 13,
  SCPT_WorkoutResult_FieldNumber_WarmUp = 14,
  SCPT_WorkoutResult_FieldNumber_FatBurning = 15,
  SCPT_WorkoutResult_FieldNumber_Aerobic = 16,
  SCPT_WorkoutResult_FieldNumber_Anaerobic = 17,
  SCPT_WorkoutResult_FieldNumber_Limit = 18,
  SCPT_WorkoutResult_FieldNumber_Speed = 19,
  SCPT_WorkoutResult_FieldNumber_Pace = 20,
  SCPT_WorkoutResult_FieldNumber_StepFreq = 21,
  SCPT_WorkoutResult_FieldNumber_Climb = 22,
  SCPT_WorkoutResult_FieldNumber_Lap = 23,
  SCPT_WorkoutResult_FieldNumber_Stroke = 24,
  SCPT_WorkoutResult_FieldNumber_StrokeCount = 25,
  SCPT_WorkoutResult_FieldNumber_StrokeFreq = 26,
  SCPT_WorkoutResult_FieldNumber_CoorAddr = 27,
  SCPT_WorkoutResult_FieldNumber_DetailCnt = 28,
  SCPT_WorkoutResult_FieldNumber_GoalType = 29,
};

/**
 * 运动结果汇总数据
 **/
GPB_FINAL @interface SCPT_WorkoutResult : GPBMessage

/** 数据ID 与详情数据对应 */
@property(nonatomic, readwrite) uint32_t id_p;

/** 运动类型 */
@property(nonatomic, readwrite) SCPT_WorkoutType type;

/** 开始时间戳 */
@property(nonatomic, readwrite) uint32_t startTimestamp;

/** 结束时间戳 */
@property(nonatomic, readwrite) uint32_t endTimestamp;

/** 目标卡路里 */
@property(nonatomic, readwrite) uint32_t goalCal;

/** 目标时长 */
@property(nonatomic, readwrite) uint32_t goalDuration;

/** 目标步数 */
@property(nonatomic, readwrite) uint32_t goalSteps;

/** 目标距离 */
@property(nonatomic, readwrite) uint32_t goalDistance;

/** 总卡路里 */
@property(nonatomic, readwrite) uint32_t cal;

/** 总时长 */
@property(nonatomic, readwrite) uint32_t duration;

/** 总步数 */
@property(nonatomic, readwrite) uint32_t steps;

/** 总距离 */
@property(nonatomic, readwrite) uint32_t distance;

/** 平均心率 */
@property(nonatomic, readwrite) uint32_t hr;

/** 运动强度百分占比 热身 */
@property(nonatomic, readwrite) uint32_t warmUp;

/** 运动强度百分占比 燃脂 */
@property(nonatomic, readwrite) uint32_t fatBurning;

/** 运动强度百分占比 有氧运动 */
@property(nonatomic, readwrite) uint32_t aerobic;

/** 运动强度百分占比 无氧运动 */
@property(nonatomic, readwrite) uint32_t anaerobic;

/** 运动强度百分占比 极限 */
@property(nonatomic, readwrite) uint32_t limit;

/** 平均速度 */
@property(nonatomic, readwrite) uint32_t speed;

/** 平均配速 */
@property(nonatomic, readwrite) uint32_t pace;

/** 平均步频 */
@property(nonatomic, readwrite) uint32_t stepFreq;

/** 爬升高度 */
@property(nonatomic, readwrite) uint32_t climb;

/** 总圈数(趟数) */
@property(nonatomic, readwrite) uint32_t lap;

/** 泳姿 */
@property(nonatomic, readwrite) SCPT_StrokeType stroke;

/** 划水(划桨)次数 */
@property(nonatomic, readwrite) uint32_t strokeCount;

/** 划水(划桨)频率 次每分 */
@property(nonatomic, readwrite) uint32_t strokeFreq;

/** GPS路径坐标存储索引(地址) */
@property(nonatomic, readwrite) uint32_t coorAddr;

/** 本次锻炼详情数据条数 */
@property(nonatomic, readwrite) uint32_t detailCnt;

/** 运动目标类型 */
@property(nonatomic, readwrite) SCPT_WorkoutGoalType goalType;

@end

/**
 * Fetches the raw value of a @c SCPT_WorkoutResult's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_WorkoutResult_Type_RawValue(SCPT_WorkoutResult *message);
/**
 * Sets the raw value of an @c SCPT_WorkoutResult's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_WorkoutResult_Type_RawValue(SCPT_WorkoutResult *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_WorkoutResult's @c stroke property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_WorkoutResult_Stroke_RawValue(SCPT_WorkoutResult *message);
/**
 * Sets the raw value of an @c SCPT_WorkoutResult's @c stroke property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_WorkoutResult_Stroke_RawValue(SCPT_WorkoutResult *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_WorkoutResult's @c goalType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_WorkoutResult_GoalType_RawValue(SCPT_WorkoutResult *message);
/**
 * Sets the raw value of an @c SCPT_WorkoutResult's @c goalType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_WorkoutResult_GoalType_RawValue(SCPT_WorkoutResult *message, int32_t value);

#pragma mark - SCPT_WorkoutDatCnt

typedef GPB_ENUM(SCPT_WorkoutDatCnt_FieldNumber) {
  SCPT_WorkoutDatCnt_FieldNumber_DatCnt = 1,
};

GPB_FINAL @interface SCPT_WorkoutDatCnt : GPBMessage

/** workout运动数据笔数 */
@property(nonatomic, readwrite) uint32_t datCnt;

@end

#pragma mark - SCPT_WorkoutDetailCnt

typedef GPB_ENUM(SCPT_WorkoutDetailCnt_FieldNumber) {
  SCPT_WorkoutDetailCnt_FieldNumber_DetailCnt = 1,
};

GPB_FINAL @interface SCPT_WorkoutDetailCnt : GPBMessage

/** workout详情数据笔数 */
@property(nonatomic, readwrite) uint32_t detailCnt;

@end

#pragma mark - SCPT_Menstrual

typedef GPB_ENUM(SCPT_Menstrual_FieldNumber) {
  SCPT_Menstrual_FieldNumber_MenstrualStart = 1,
  SCPT_Menstrual_FieldNumber_MenstrualEnd = 2,
  SCPT_Menstrual_FieldNumber_FertileStart = 3,
  SCPT_Menstrual_FieldNumber_FertileEnd = 4,
  SCPT_Menstrual_FieldNumber_OvulationDay = 5,
};

/**
 * 生理周期参数
 **/
GPB_FINAL @interface SCPT_Menstrual : GPBMessage

/** 经期起始时间戳 */
@property(nonatomic, readwrite) uint32_t menstrualStart;

/** 经期结束时间戳 */
@property(nonatomic, readwrite) uint32_t menstrualEnd;

/** 易孕期起始时间戳 */
@property(nonatomic, readwrite) uint32_t fertileStart;

/** 易孕期结束时间戳 */
@property(nonatomic, readwrite) uint32_t fertileEnd;

/** 排卵日时间戳 */
@property(nonatomic, readwrite) uint32_t ovulationDay;

@end

#pragma mark - SCPT_SmsSend

typedef GPB_ENUM(SCPT_SmsSend_FieldNumber) {
  SCPT_SmsSend_FieldNumber_Idx = 1,
  SCPT_SmsSend_FieldNumber_NumId = 2,
};

GPB_FINAL @interface SCPT_SmsSend : GPBMessage

/** 短信编号 */
@property(nonatomic, readwrite) uint32_t idx;

/** 回复号码或ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *numId;

@end

#pragma mark - SCPT_SmsReplySet

typedef GPB_ENUM(SCPT_SmsReplySet_FieldNumber) {
  SCPT_SmsReplySet_FieldNumber_SmsArray = 1,
};

GPB_FINAL @interface SCPT_SmsReplySet : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SCPT_SmsReplySet_Sms*> *smsArray;
/** The number of items in @c smsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger smsArray_Count;

@end

#pragma mark - SCPT_SmsReplySet_Sms

typedef GPB_ENUM(SCPT_SmsReplySet_Sms_FieldNumber) {
  SCPT_SmsReplySet_Sms_FieldNumber_Idx = 1,
  SCPT_SmsReplySet_Sms_FieldNumber_Content = 2,
};

GPB_FINAL @interface SCPT_SmsReplySet_Sms : GPBMessage

/** 短信编号 */
@property(nonatomic, readwrite) uint32_t idx;

/** 短信内容 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *content;

@end

#pragma mark - SCPT_Music

typedef GPB_ENUM(SCPT_Music_FieldNumber) {
  SCPT_Music_FieldNumber_State = 1,
  SCPT_Music_FieldNumber_Duration = 2,
  SCPT_Music_FieldNumber_Elapsed = 3,
  SCPT_Music_FieldNumber_Volume = 4,
  SCPT_Music_FieldNumber_Title = 5,
  SCPT_Music_FieldNumber_PlayerName = 6,
  SCPT_Music_FieldNumber_Artist = 7,
  SCPT_Music_FieldNumber_Lyrics = 8,
};

GPB_FINAL @interface SCPT_Music : GPBMessage

/** 播放状态 */
@property(nonatomic, readwrite) uint32_t state;

/** 歌曲总时长 */
@property(nonatomic, readwrite) uint32_t duration;

/** 播放进度时长 */
@property(nonatomic, readwrite) uint32_t elapsed;

/** 音量 */
@property(nonatomic, readwrite) uint32_t volume;

/** 音乐名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

/** 播放器名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *playerName;

/** 艺术家名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *artist;

/** 歌词 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *lyrics;

@end

#pragma mark - SCPT_MusicContrl

typedef GPB_ENUM(SCPT_MusicContrl_FieldNumber) {
  SCPT_MusicContrl_FieldNumber_Type = 1,
  SCPT_MusicContrl_FieldNumber_Volume = 2,
};

GPB_FINAL @interface SCPT_MusicContrl : GPBMessage

@property(nonatomic, readwrite) SCPT_MusicContrl_Type type;

/** 音量值 */
@property(nonatomic, readwrite) uint32_t volume;

@end

/**
 * Fetches the raw value of a @c SCPT_MusicContrl's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_MusicContrl_Type_RawValue(SCPT_MusicContrl *message);
/**
 * Sets the raw value of an @c SCPT_MusicContrl's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_MusicContrl_Type_RawValue(SCPT_MusicContrl *message, int32_t value);

#pragma mark - SCPT_RemindCount

typedef GPB_ENUM(SCPT_RemindCount_FieldNumber) {
  SCPT_RemindCount_FieldNumber_Count = 1,
};

GPB_FINAL @interface SCPT_RemindCount : GPBMessage

/** 提醒数量 */
@property(nonatomic, readwrite) uint32_t count;

@end

#pragma mark - SCPT_RemindDel

typedef GPB_ENUM(SCPT_RemindDel_FieldNumber) {
  SCPT_RemindDel_FieldNumber_Id_p = 1,
};

GPB_FINAL @interface SCPT_RemindDel : GPBMessage

/** 提醒编号 */
@property(nonatomic, readwrite) uint32_t id_p;

@end

#pragma mark - SCPT_Remind

typedef GPB_ENUM(SCPT_Remind_FieldNumber) {
  SCPT_Remind_FieldNumber_Type = 1,
  SCPT_Remind_FieldNumber_Sw = 2,
  SCPT_Remind_FieldNumber_Timestamp = 3,
  SCPT_Remind_FieldNumber_WeekCycle = 4,
  SCPT_Remind_FieldNumber_FreeCycle = 5,
  SCPT_Remind_FieldNumber_Vib = 6,
  SCPT_Remind_FieldNumber_Id_p = 7,
  SCPT_Remind_FieldNumber_Name = 8,
};

GPB_FINAL @interface SCPT_Remind : GPBMessage

/** 提醒类型 */
@property(nonatomic, readwrite) SCPT_Remind_Type type;

/** 提醒开关 */
@property(nonatomic, readwrite) BOOL sw;

/** 提醒时间点 */
@property(nonatomic, readwrite) uint32_t timestamp;

/** 每周重复周期 */
@property(nonatomic, readwrite) uint32_t weekCycle;

/** 重复周期 */
@property(nonatomic, readwrite) uint32_t freeCycle;

/** 振动模式 */
@property(nonatomic, readwrite) uint32_t vib;

/** 提醒编号 */
@property(nonatomic, readwrite) uint32_t id_p;

/** 提醒名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@end

/**
 * Fetches the raw value of a @c SCPT_Remind's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Remind_Type_RawValue(SCPT_Remind *message);
/**
 * Sets the raw value of an @c SCPT_Remind's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Remind_Type_RawValue(SCPT_Remind *message, int32_t value);

#pragma mark - SCPT_BleMac

typedef GPB_ENUM(SCPT_BleMac_FieldNumber) {
  SCPT_BleMac_FieldNumber_Mac = 1,
};

GPB_FINAL @interface SCPT_BleMac : GPBMessage

/** 设备mac地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mac;

@end

#pragma mark - SCPT_SerialNumber

typedef GPB_ENUM(SCPT_SerialNumber_FieldNumber) {
  SCPT_SerialNumber_FieldNumber_Number = 1,
};

GPB_FINAL @interface SCPT_SerialNumber : GPBMessage

/** 011120201208010112345 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *number;

@end

#pragma mark - SCPT_FactoryTestCmd

typedef GPB_ENUM(SCPT_FactoryTestCmd_FieldNumber) {
  SCPT_FactoryTestCmd_FieldNumber_Type = 1,
  SCPT_FactoryTestCmd_FieldNumber_FwVer = 2,
  SCPT_FactoryTestCmd_FieldNumber_TpVer = 3,
  SCPT_FactoryTestCmd_FieldNumber_FontVer = 4,
  SCPT_FactoryTestCmd_FieldNumber_GpsVer = 5,
  SCPT_FactoryTestCmd_FieldNumber_TempDif = 6,
};

/**
 * 版本号格式统一为:x.x.x
 **/
GPB_FINAL @interface SCPT_FactoryTestCmd : GPBMessage

/** 测试模式 */
@property(nonatomic, readwrite) uint32_t type;

/** apollo固件版本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fwVer;

/** 触摸版本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tpVer;

/** 字库版本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fontVer;

/** gps固件版本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *gpsVer;

@property(nonatomic, readwrite) uint32_t tempDif;

@end

#pragma mark - SCPT_AdcDebugCmd

typedef GPB_ENUM(SCPT_AdcDebugCmd_FieldNumber) {
  SCPT_AdcDebugCmd_FieldNumber_AdcCap = 1,
  SCPT_AdcDebugCmd_FieldNumber_AdcVal = 2,
  SCPT_AdcDebugCmd_FieldNumber_NtcVal = 3,
};

GPB_FINAL @interface SCPT_AdcDebugCmd : GPBMessage

/** 电量百分比 */
@property(nonatomic, readwrite) uint32_t adcCap;

/** 电量ADC值 */
@property(nonatomic, readwrite) uint32_t adcVal;

/** NTC ADC值 */
@property(nonatomic, readwrite) uint32_t ntcVal;

@end

#pragma mark - SCPT_NstDebugCmd

typedef GPB_ENUM(SCPT_NstDebugCmd_FieldNumber) {
  SCPT_NstDebugCmd_FieldNumber_NstCnt = 1,
  SCPT_NstDebugCmd_FieldNumber_NstTemp = 2,
  SCPT_NstDebugCmd_FieldNumber_SplTemp = 3,
  SCPT_NstDebugCmd_FieldNumber_SplPre = 4,
};

GPB_FINAL @interface SCPT_NstDebugCmd : GPBMessage

/** 脉冲数 */
@property(nonatomic, readwrite) uint32_t nstCnt;

/** NST温度值 传整 保留一位小数放大十倍 */
@property(nonatomic, readwrite) uint32_t nstTemp;

/** 气压计温度值 传整 保留一位小数放大十倍 */
@property(nonatomic, readwrite) uint32_t splTemp;

/** 气压值 传整 保留一位小数放大十倍 */
@property(nonatomic, readwrite) uint32_t splPre;

@end

#pragma mark - SCPT_Version

typedef GPB_ENUM(SCPT_Version_FieldNumber) {
  SCPT_Version_FieldNumber_Firmware = 1,
  SCPT_Version_FieldNumber_GpsfwVer = 2,
  SCPT_Version_FieldNumber_TpfwVer = 3,
  SCPT_Version_FieldNumber_FontVer = 4,
  SCPT_Version_FieldNumber_CustomerCode = 5,
};

/**
 * 版本号格式统一为:x.x.x
 **/
GPB_FINAL @interface SCPT_Version : GPBMessage

/** apollo固件版本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *firmware;

/** gps固件版本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *gpsfwVer;

/** 触摸版本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tpfwVer;

/** 字库版本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fontVer;

/** 用户版本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *customerCode;

@end

#pragma mark - SCPT_Time

typedef GPB_ENUM(SCPT_Time_FieldNumber) {
  SCPT_Time_FieldNumber_Stamp = 1,
  SCPT_Time_FieldNumber_UtcOffset = 2,
};

GPB_FINAL @interface SCPT_Time : GPBMessage

/** 时间戳 */
@property(nonatomic, readwrite) uint32_t stamp;

/** 时区偏移量，单位秒 */
@property(nonatomic, readwrite) int32_t utcOffset;

@end

#pragma mark - SCPT_Format

typedef GPB_ENUM(SCPT_Format_FieldNumber) {
  SCPT_Format_FieldNumber_Time = 1,
  SCPT_Format_FieldNumber_Temperature = 2,
  SCPT_Format_FieldNumber_Distance = 3,
  SCPT_Format_FieldNumber_Weather = 4,
};

GPB_FINAL @interface SCPT_Format : GPBMessage

@property(nonatomic, readwrite) SCPT_Format_Time time;

@property(nonatomic, readwrite) SCPT_Format_Temperature temperature;

@property(nonatomic, readwrite) SCPT_Format_Distance distance;

@property(nonatomic, readwrite) SCPT_Format_Weather weather;

@end

/**
 * Fetches the raw value of a @c SCPT_Format's @c time property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Format_Time_RawValue(SCPT_Format *message);
/**
 * Sets the raw value of an @c SCPT_Format's @c time property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Format_Time_RawValue(SCPT_Format *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Format's @c temperature property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Format_Temperature_RawValue(SCPT_Format *message);
/**
 * Sets the raw value of an @c SCPT_Format's @c temperature property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Format_Temperature_RawValue(SCPT_Format *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Format's @c distance property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Format_Distance_RawValue(SCPT_Format *message);
/**
 * Sets the raw value of an @c SCPT_Format's @c distance property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Format_Distance_RawValue(SCPT_Format *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Format's @c weather property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Format_Weather_RawValue(SCPT_Format *message);
/**
 * Sets the raw value of an @c SCPT_Format's @c weather property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Format_Weather_RawValue(SCPT_Format *message, int32_t value);

#pragma mark - SCPT_Watchface

typedef GPB_ENUM(SCPT_Watchface_FieldNumber) {
  SCPT_Watchface_FieldNumber_Id_p = 1,
};

GPB_FINAL @interface SCPT_Watchface : GPBMessage

/** 当前表盘的id */
@property(nonatomic, readwrite) uint32_t id_p;

@end

#pragma mark - SCPT_Brightness

typedef GPB_ENUM(SCPT_Brightness_FieldNumber) {
  SCPT_Brightness_FieldNumber_Percent = 1,
};

GPB_FINAL @interface SCPT_Brightness : GPBMessage

/** 屏幕亮度0~100 */
@property(nonatomic, readwrite) uint32_t percent;

@end

#pragma mark - SCPT_ScreenTime

typedef GPB_ENUM(SCPT_ScreenTime_FieldNumber) {
  SCPT_ScreenTime_FieldNumber_Value = 1,
};

GPB_FINAL @interface SCPT_ScreenTime : GPBMessage

/** 亮屏时间（秒）。0代表不灭屏 */
@property(nonatomic, readwrite) uint32_t value;

@end

#pragma mark - SCPT_Battery

typedef GPB_ENUM(SCPT_Battery_FieldNumber) {
  SCPT_Battery_FieldNumber_Percent = 1,
};

GPB_FINAL @interface SCPT_Battery : GPBMessage

/** 电池电量0~100 */
@property(nonatomic, readwrite) uint32_t percent;

@end

#pragma mark - SCPT_Vibration

typedef GPB_ENUM(SCPT_Vibration_FieldNumber) {
  SCPT_Vibration_FieldNumber_Percent = 1,
};

GPB_FINAL @interface SCPT_Vibration : GPBMessage

/** 震动强度0~100 */
@property(nonatomic, readwrite) uint32_t percent;

@end

#pragma mark - SCPT_Language

typedef GPB_ENUM(SCPT_Language_FieldNumber) {
  SCPT_Language_FieldNumber_Type = 1,
};

GPB_FINAL @interface SCPT_Language : GPBMessage

@property(nonatomic, readwrite) SCPT_Language_Type type;

@end

/**
 * Fetches the raw value of a @c SCPT_Language's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Language_Type_RawValue(SCPT_Language *message);
/**
 * Sets the raw value of an @c SCPT_Language's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Language_Type_RawValue(SCPT_Language *message, int32_t value);

#pragma mark - SCPT_UserInfo

typedef GPB_ENUM(SCPT_UserInfo_FieldNumber) {
  SCPT_UserInfo_FieldNumber_Male = 1,
  SCPT_UserInfo_FieldNumber_Age = 2,
  SCPT_UserInfo_FieldNumber_Height = 3,
  SCPT_UserInfo_FieldNumber_Weight = 4,
};

GPB_FINAL @interface SCPT_UserInfo : GPBMessage

/** 性别，男true，女false */
@property(nonatomic, readwrite) BOOL male;

/** 年龄 */
@property(nonatomic, readwrite) uint32_t age;

/** 身高 */
@property(nonatomic, readwrite) uint32_t height;

/** 体重 */
@property(nonatomic, readwrite) uint32_t weight;

@end

#pragma mark - SCPT_Goal

typedef GPB_ENUM(SCPT_Goal_FieldNumber) {
  SCPT_Goal_FieldNumber_Step = 1,
  SCPT_Goal_FieldNumber_Distance = 2,
  SCPT_Goal_FieldNumber_Calorie = 3,
  SCPT_Goal_FieldNumber_Duration = 4,
  SCPT_Goal_FieldNumber_Sleep = 5,
};

GPB_FINAL @interface SCPT_Goal : GPBMessage

/** 步数目标 */
@property(nonatomic, readwrite) uint32_t step;

/** 距离目标（米） */
@property(nonatomic, readwrite) uint32_t distance;

/** 卡路里目标（卡） */
@property(nonatomic, readwrite) uint32_t calorie;

/** 运动时长目标（分钟） */
@property(nonatomic, readwrite) uint32_t duration;

/** 睡眠目标（分钟） */
@property(nonatomic, readwrite) uint32_t sleep;

@end

#pragma mark - SCPT_Activity

typedef GPB_ENUM(SCPT_Activity_FieldNumber) {
  SCPT_Activity_FieldNumber_Timestamp = 1,
  SCPT_Activity_FieldNumber_Step = 2,
  SCPT_Activity_FieldNumber_Distance = 3,
  SCPT_Activity_FieldNumber_Duration = 4,
  SCPT_Activity_FieldNumber_ActiveCalorie = 5,
  SCPT_Activity_FieldNumber_BaseCalorie = 6,
};

/**
 * 单笔运动数据
 **/
GPB_FINAL @interface SCPT_Activity : GPBMessage

/** 时间戳 */
@property(nonatomic, readwrite) uint32_t timestamp;

/** 步数 */
@property(nonatomic, readwrite) uint32_t step;

/** 距离（米） */
@property(nonatomic, readwrite) uint32_t distance;

/** 运动时长（分钟） */
@property(nonatomic, readwrite) uint32_t duration;

/** 动态卡路里（卡） */
@property(nonatomic, readwrite) uint32_t activeCalorie;

/** 静态卡路里（卡） */
@property(nonatomic, readwrite) uint32_t baseCalorie;

@end

#pragma mark - SCPT_ActivityCount

typedef GPB_ENUM(SCPT_ActivityCount_FieldNumber) {
  SCPT_ActivityCount_FieldNumber_Value = 1,
};

GPB_FINAL @interface SCPT_ActivityCount : GPBMessage

/** 已存运动数据条数 */
@property(nonatomic, readwrite) uint32_t value;

@end

#pragma mark - SCPT_Sleep

typedef GPB_ENUM(SCPT_Sleep_FieldNumber) {
  SCPT_Sleep_FieldNumber_Timestamp = 1,
  SCPT_Sleep_FieldNumber_Type = 2,
};

/**
 * 单笔睡眠数据
 **/
GPB_FINAL @interface SCPT_Sleep : GPBMessage

/** 时间戳 */
@property(nonatomic, readwrite) uint32_t timestamp;

/** 状态 */
@property(nonatomic, readwrite) SCPT_Sleep_Type type;

@end

/**
 * Fetches the raw value of a @c SCPT_Sleep's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Sleep_Type_RawValue(SCPT_Sleep *message);
/**
 * Sets the raw value of an @c SCPT_Sleep's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Sleep_Type_RawValue(SCPT_Sleep *message, int32_t value);

#pragma mark - SCPT_SleepCount

typedef GPB_ENUM(SCPT_SleepCount_FieldNumber) {
  SCPT_SleepCount_FieldNumber_Value = 1,
};

GPB_FINAL @interface SCPT_SleepCount : GPBMessage

/** 已存睡眠数据条数 */
@property(nonatomic, readwrite) uint32_t value;

@end

#pragma mark - SCPT_Heartrate

typedef GPB_ENUM(SCPT_Heartrate_FieldNumber) {
  SCPT_Heartrate_FieldNumber_Timestamp = 1,
  SCPT_Heartrate_FieldNumber_Heartrate = 2,
  SCPT_Heartrate_FieldNumber_Hrv = 3,
  SCPT_Heartrate_FieldNumber_Type = 4,
};

GPB_FINAL @interface SCPT_Heartrate : GPBMessage

/** 时间戳 */
@property(nonatomic, readwrite) uint32_t timestamp;

/** 心率 */
@property(nonatomic, readwrite) uint32_t heartrate;

/** hrv */
@property(nonatomic, readwrite) uint32_t hrv;

/** 测量类型 自动或手动或其他 */
@property(nonatomic, readwrite) uint32_t type;

@end

#pragma mark - SCPT_HeartrateCount

typedef GPB_ENUM(SCPT_HeartrateCount_FieldNumber) {
  SCPT_HeartrateCount_FieldNumber_Value = 1,
};

GPB_FINAL @interface SCPT_HeartrateCount : GPBMessage

/** 已存心率条数 */
@property(nonatomic, readwrite) uint32_t value;

@end

#pragma mark - SCPT_HeartrateMonitor

typedef GPB_ENUM(SCPT_HeartrateMonitor_FieldNumber) {
  SCPT_HeartrateMonitor_FieldNumber_Duration = 1,
  SCPT_HeartrateMonitor_FieldNumber_LowThreshold = 2,
  SCPT_HeartrateMonitor_FieldNumber_HighThreshold = 3,
  SCPT_HeartrateMonitor_FieldNumber_StartTimestamp = 4,
  SCPT_HeartrateMonitor_FieldNumber_EndTimestamp = 5,
};

/**
 * 心率监测
 **/
GPB_FINAL @interface SCPT_HeartrateMonitor : GPBMessage

/** 监测间隔（分钟），0代表关闭 */
@property(nonatomic, readwrite) uint32_t duration;

/** 报警下限 */
@property(nonatomic, readwrite) uint32_t lowThreshold;

/** 报警上限 */
@property(nonatomic, readwrite) uint32_t highThreshold;

/** 监测时间段起点(秒 从0点开始计算) */
@property(nonatomic, readwrite) uint32_t startTimestamp;

/** 监测时间段终点(秒 从0点开始计算) */
@property(nonatomic, readwrite) uint32_t endTimestamp;

@end

#pragma mark - SCPT_HeartrateRealtime

typedef GPB_ENUM(SCPT_HeartrateRealtime_FieldNumber) {
  SCPT_HeartrateRealtime_FieldNumber_Heartrate = 1,
};

/**
 * 实时心率
 **/
GPB_FINAL @interface SCPT_HeartrateRealtime : GPBMessage

/** 心率值 */
@property(nonatomic, readwrite) uint32_t heartrate;

@end

#pragma mark - SCPT_BodyTemperatureCount

typedef GPB_ENUM(SCPT_BodyTemperatureCount_FieldNumber) {
  SCPT_BodyTemperatureCount_FieldNumber_Value = 1,
};

GPB_FINAL @interface SCPT_BodyTemperatureCount : GPBMessage

/** 已存温度数据条数 */
@property(nonatomic, readwrite) uint32_t value;

@end

#pragma mark - SCPT_BodyTemperatureData

typedef GPB_ENUM(SCPT_BodyTemperatureData_FieldNumber) {
  SCPT_BodyTemperatureData_FieldNumber_Timestamp = 1,
  SCPT_BodyTemperatureData_FieldNumber_Temperature = 2,
};

/**
 * 体温监测数据
 **/
GPB_FINAL @interface SCPT_BodyTemperatureData : GPBMessage

/** 时间戳 */
@property(nonatomic, readwrite) uint32_t timestamp;

/** 温度 */
@property(nonatomic, readwrite) uint32_t temperature;

@end

#pragma mark - SCPT_SpO2Count

typedef GPB_ENUM(SCPT_SpO2Count_FieldNumber) {
  SCPT_SpO2Count_FieldNumber_Value = 1,
};

GPB_FINAL @interface SCPT_SpO2Count : GPBMessage

/** 已存血氧数据条数 */
@property(nonatomic, readwrite) uint32_t value;

@end

#pragma mark - SCPT_SpO2Data

typedef GPB_ENUM(SCPT_SpO2Data_FieldNumber) {
  SCPT_SpO2Data_FieldNumber_Timestamp = 1,
  SCPT_SpO2Data_FieldNumber_Spo2Val = 2,
};

/**
 * 血氧监测数据
 **/
GPB_FINAL @interface SCPT_SpO2Data : GPBMessage

/** 时间戳 */
@property(nonatomic, readwrite) uint32_t timestamp;

/** 血氧值 */
@property(nonatomic, readwrite) uint32_t spo2Val;

@end

#pragma mark - SCPT_StressCount

typedef GPB_ENUM(SCPT_StressCount_FieldNumber) {
  SCPT_StressCount_FieldNumber_Value = 1,
};

GPB_FINAL @interface SCPT_StressCount : GPBMessage

/** 已存压力值数据条数 */
@property(nonatomic, readwrite) uint32_t value;

@end

#pragma mark - SCPT_StressData

typedef GPB_ENUM(SCPT_StressData_FieldNumber) {
  SCPT_StressData_FieldNumber_Timestamp = 1,
  SCPT_StressData_FieldNumber_Stress = 2,
};

/**
 * 压力监测数据
 **/
GPB_FINAL @interface SCPT_StressData : GPBMessage

/** 时间戳 */
@property(nonatomic, readwrite) uint32_t timestamp;

/** 压力值 */
@property(nonatomic, readwrite) uint32_t stress;

@end

#pragma mark - SCPT_BodyTemperatureMonitor

typedef GPB_ENUM(SCPT_BodyTemperatureMonitor_FieldNumber) {
  SCPT_BodyTemperatureMonitor_FieldNumber_Duration = 1,
  SCPT_BodyTemperatureMonitor_FieldNumber_LowThreshold = 2,
  SCPT_BodyTemperatureMonitor_FieldNumber_HighThreshold = 3,
  SCPT_BodyTemperatureMonitor_FieldNumber_StartTimestamp = 4,
  SCPT_BodyTemperatureMonitor_FieldNumber_EndTimestamp = 5,
};

/**
 * 体温监测
 **/
GPB_FINAL @interface SCPT_BodyTemperatureMonitor : GPBMessage

/** 监测间隔（分钟），0代表关闭 */
@property(nonatomic, readwrite) uint32_t duration;

/** 报警下限 */
@property(nonatomic, readwrite) uint32_t lowThreshold;

/** 报警上限 */
@property(nonatomic, readwrite) uint32_t highThreshold;

/** 监测时间段起点(秒 从0点开始计算) */
@property(nonatomic, readwrite) uint32_t startTimestamp;

/** 监测时间段终点(秒 从0点开始计算) */
@property(nonatomic, readwrite) uint32_t endTimestamp;

@end

#pragma mark - SCPT_Sedentary

typedef GPB_ENUM(SCPT_Sedentary_FieldNumber) {
  SCPT_Sedentary_FieldNumber_Duration = 1,
  SCPT_Sedentary_FieldNumber_StepThreshold = 2,
  SCPT_Sedentary_FieldNumber_StartTimestamp = 3,
  SCPT_Sedentary_FieldNumber_EndTimestamp = 4,
  SCPT_Sedentary_FieldNumber_Cycle = 5,
};

/**
 * 久坐提醒
 **/
GPB_FINAL @interface SCPT_Sedentary : GPBMessage

/** 提醒间隔（分钟），0代表关闭 */
@property(nonatomic, readwrite) uint32_t duration;

/** 步数阈值，低于提醒 */
@property(nonatomic, readwrite) uint32_t stepThreshold;

/** 提醒时间段起点(秒 从0点开始计算) */
@property(nonatomic, readwrite) uint32_t startTimestamp;

/** 提醒时间段终点(秒 从0点开始计算) */
@property(nonatomic, readwrite) uint32_t endTimestamp;

/** 提醒周期(周日到周六对应bit0到bit6) */
@property(nonatomic, readwrite) uint32_t cycle;

@end

#pragma mark - SCPT_WashHands

typedef GPB_ENUM(SCPT_WashHands_FieldNumber) {
  SCPT_WashHands_FieldNumber_Duration = 1,
  SCPT_WashHands_FieldNumber_StartTimestamp = 2,
  SCPT_WashHands_FieldNumber_EndTimestamp = 3,
  SCPT_WashHands_FieldNumber_Cycle = 4,
};

/**
 * 洗手提醒
 **/
GPB_FINAL @interface SCPT_WashHands : GPBMessage

/** 提醒间隔（分钟），0代表关闭 */
@property(nonatomic, readwrite) uint32_t duration;

/** 提醒时间段起点(秒 从0点开始计算) */
@property(nonatomic, readwrite) uint32_t startTimestamp;

/** 提醒时间段终点(秒 从0点开始计算) */
@property(nonatomic, readwrite) uint32_t endTimestamp;

/** 提醒周期(周日到周六对应bit0到bit6) */
@property(nonatomic, readwrite) uint32_t cycle;

@end

#pragma mark - SCPT_Drinkwater

typedef GPB_ENUM(SCPT_Drinkwater_FieldNumber) {
  SCPT_Drinkwater_FieldNumber_Duration = 1,
  SCPT_Drinkwater_FieldNumber_StartTimestamp = 2,
  SCPT_Drinkwater_FieldNumber_EndTimestamp = 3,
  SCPT_Drinkwater_FieldNumber_Cycle = 4,
};

/**
 * 喝水提醒
 **/
GPB_FINAL @interface SCPT_Drinkwater : GPBMessage

/** 提醒间隔（分钟），0代表关闭 */
@property(nonatomic, readwrite) uint32_t duration;

/** 提醒时间段起点(秒 从0点开始计算) */
@property(nonatomic, readwrite) uint32_t startTimestamp;

/** 提醒时间段终点(秒 从0点开始计算) */
@property(nonatomic, readwrite) uint32_t endTimestamp;

/** 提醒周期(周日到周六对应bit0到bit6) */
@property(nonatomic, readwrite) uint32_t cycle;

@end

#pragma mark - SCPT_Weather

typedef GPB_ENUM(SCPT_Weather_FieldNumber) {
  SCPT_Weather_FieldNumber_DaysArray = 1,
};

GPB_FINAL @interface SCPT_Weather : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SCPT_Weather_Day*> *daysArray;
/** The number of items in @c daysArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger daysArray_Count;

@end

#pragma mark - SCPT_Weather_Day

typedef GPB_ENUM(SCPT_Weather_Day_FieldNumber) {
  SCPT_Weather_Day_FieldNumber_Index = 1,
  SCPT_Weather_Day_FieldNumber_Type = 2,
  SCPT_Weather_Day_FieldNumber_Temperature = 3,
  SCPT_Weather_Day_FieldNumber_TemperatureMax = 4,
  SCPT_Weather_Day_FieldNumber_TemperatureMin = 5,
  SCPT_Weather_Day_FieldNumber_Wind = 6,
  SCPT_Weather_Day_FieldNumber_WindDir = 7,
  SCPT_Weather_Day_FieldNumber_Uv = 8,
  SCPT_Weather_Day_FieldNumber_Pm25 = 9,
  SCPT_Weather_Day_FieldNumber_Aq = 10,
  SCPT_Weather_Day_FieldNumber_Humidity = 11,
  SCPT_Weather_Day_FieldNumber_RainPro = 12,
  SCPT_Weather_Day_FieldNumber_City = 13,
  SCPT_Weather_Day_FieldNumber_Pressure = 14,
};

GPB_FINAL @interface SCPT_Weather_Day : GPBMessage

/** 第几天的天气。0代表当天，1代表第二天 */
@property(nonatomic, readwrite) int32_t index;

/** 天气类型 */
@property(nonatomic, readwrite) SCPT_Weather_Type type;

/** 温度 */
@property(nonatomic, readwrite) int32_t temperature;

/** 最高温度 */
@property(nonatomic, readwrite) int32_t temperatureMax;

/** 最低温度 */
@property(nonatomic, readwrite) int32_t temperatureMin;

/** 风力 */
@property(nonatomic, readwrite) uint32_t wind;

/** 风向 */
@property(nonatomic, readwrite) SCPT_Weather_TypeWind windDir;

/** 紫外线强度 */
@property(nonatomic, readwrite) uint32_t uv;

/** PM2.5值 */
@property(nonatomic, readwrite) uint32_t pm25;

/** 空气质量 */
@property(nonatomic, readwrite) uint32_t aq;

/** 空气湿度(百分比) */
@property(nonatomic, readwrite) uint32_t humidity;

/** 降雨概率(百分比) */
@property(nonatomic, readwrite) uint32_t rainPro;

/** 天气所在城市名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *city;

/** 当前地区纬度气压值 */
@property(nonatomic, readwrite) uint32_t pressure;

@end

/**
 * Fetches the raw value of a @c SCPT_Weather_Day's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Weather_Day_Type_RawValue(SCPT_Weather_Day *message);
/**
 * Sets the raw value of an @c SCPT_Weather_Day's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Weather_Day_Type_RawValue(SCPT_Weather_Day *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Weather_Day's @c windDir property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Weather_Day_WindDir_RawValue(SCPT_Weather_Day *message);
/**
 * Sets the raw value of an @c SCPT_Weather_Day's @c windDir property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Weather_Day_WindDir_RawValue(SCPT_Weather_Day *message, int32_t value);

#pragma mark - SCPT_Notification

typedef GPB_ENUM(SCPT_Notification_FieldNumber) {
  SCPT_Notification_FieldNumber_Type = 1,
  SCPT_Notification_FieldNumber_Title = 2,
  SCPT_Notification_FieldNumber_Content = 3,
  SCPT_Notification_FieldNumber_Timestamp = 4,
  SCPT_Notification_FieldNumber_Uuid = 5,
};

/**
 * 通知推送
 **/
GPB_FINAL @interface SCPT_Notification : GPBMessage

/** 通知类型 */
@property(nonatomic, readwrite) SCPT_NotificationType type;

/** 标题 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

/** 内容 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *content;

/** 时间戳 */
@property(nonatomic, readwrite) uint32_t timestamp;

/** UUID */
@property(nonatomic, readwrite) uint32_t uuid;

@end

/**
 * Fetches the raw value of a @c SCPT_Notification's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Notification_Type_RawValue(SCPT_Notification *message);
/**
 * Sets the raw value of an @c SCPT_Notification's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Notification_Type_RawValue(SCPT_Notification *message, int32_t value);

#pragma mark - SCPT_Switches

typedef GPB_ENUM(SCPT_Switches_FieldNumber) {
  SCPT_Switches_FieldNumber_Notification = 1,
  SCPT_Switches_FieldNumber_WristFlick = 2,
  SCPT_Switches_FieldNumber_Disturb = 3,
  SCPT_Switches_FieldNumber_AirplaneMode = 4,
  SCPT_Switches_FieldNumber_Gps = 5,
  SCPT_Switches_FieldNumber_Stress = 6,
  SCPT_Switches_FieldNumber_Vibration = 7,
  SCPT_Switches_FieldNumber_BasicCal = 8,
  SCPT_Switches_FieldNumber_WorkoutAuto = 9,
};

/**
 * 开关
 **/
GPB_FINAL @interface SCPT_Switches : GPBMessage

/** 通知开关 */
@property(nonatomic, readwrite) SCPT_Switches_State notification;

/** 抬手亮屏开关 */
@property(nonatomic, readwrite) SCPT_Switches_State wristFlick;

/** 勿扰模式开关 */
@property(nonatomic, readwrite) SCPT_Switches_State disturb;

/** 飞行模式开关 */
@property(nonatomic, readwrite) SCPT_Switches_State airplaneMode;

/** GPS开关 */
@property(nonatomic, readwrite) SCPT_Switches_State gps;

/** 压力检测开关 */
@property(nonatomic, readwrite) SCPT_Switches_State stress;

/** 震动开关 */
@property(nonatomic, readwrite) SCPT_Switches_State vibration;

/** 静态卡路里开关 */
@property(nonatomic, readwrite) SCPT_Switches_State basicCal;

/** 运动场景自动识别开关 */
@property(nonatomic, readwrite) SCPT_Switches_State workoutAuto;

@end

/**
 * Fetches the raw value of a @c SCPT_Switches's @c notification property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Switches_Notification_RawValue(SCPT_Switches *message);
/**
 * Sets the raw value of an @c SCPT_Switches's @c notification property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Switches_Notification_RawValue(SCPT_Switches *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Switches's @c wristFlick property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Switches_WristFlick_RawValue(SCPT_Switches *message);
/**
 * Sets the raw value of an @c SCPT_Switches's @c wristFlick property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Switches_WristFlick_RawValue(SCPT_Switches *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Switches's @c disturb property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Switches_Disturb_RawValue(SCPT_Switches *message);
/**
 * Sets the raw value of an @c SCPT_Switches's @c disturb property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Switches_Disturb_RawValue(SCPT_Switches *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Switches's @c airplaneMode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Switches_AirplaneMode_RawValue(SCPT_Switches *message);
/**
 * Sets the raw value of an @c SCPT_Switches's @c airplaneMode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Switches_AirplaneMode_RawValue(SCPT_Switches *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Switches's @c gps property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Switches_Gps_RawValue(SCPT_Switches *message);
/**
 * Sets the raw value of an @c SCPT_Switches's @c gps property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Switches_Gps_RawValue(SCPT_Switches *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Switches's @c stress property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Switches_Stress_RawValue(SCPT_Switches *message);
/**
 * Sets the raw value of an @c SCPT_Switches's @c stress property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Switches_Stress_RawValue(SCPT_Switches *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Switches's @c vibration property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Switches_Vibration_RawValue(SCPT_Switches *message);
/**
 * Sets the raw value of an @c SCPT_Switches's @c vibration property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Switches_Vibration_RawValue(SCPT_Switches *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Switches's @c basicCal property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Switches_BasicCal_RawValue(SCPT_Switches *message);
/**
 * Sets the raw value of an @c SCPT_Switches's @c basicCal property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Switches_BasicCal_RawValue(SCPT_Switches *message, int32_t value);

/**
 * Fetches the raw value of a @c SCPT_Switches's @c workoutAuto property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Switches_WorkoutAuto_RawValue(SCPT_Switches *message);
/**
 * Sets the raw value of an @c SCPT_Switches's @c workoutAuto property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Switches_WorkoutAuto_RawValue(SCPT_Switches *message, int32_t value);

#pragma mark - SCPT_NotificationSwitches

typedef GPB_ENUM(SCPT_NotificationSwitches_FieldNumber) {
  SCPT_NotificationSwitches_FieldNumber_ConfigsArray = 1,
};

/**
 * 推送细分开关
 **/
GPB_FINAL @interface SCPT_NotificationSwitches : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SCPT_NotificationSwitches_Config*> *configsArray;
/** The number of items in @c configsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger configsArray_Count;

@end

#pragma mark - SCPT_NotificationSwitches_Config

typedef GPB_ENUM(SCPT_NotificationSwitches_Config_FieldNumber) {
  SCPT_NotificationSwitches_Config_FieldNumber_Type = 1,
  SCPT_NotificationSwitches_Config_FieldNumber_State = 2,
};

GPB_FINAL @interface SCPT_NotificationSwitches_Config : GPBMessage

@property(nonatomic, readwrite) SCPT_NotificationType type;

@property(nonatomic, readwrite) BOOL state;

@end

/**
 * Fetches the raw value of a @c SCPT_NotificationSwitches_Config's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_NotificationSwitches_Config_Type_RawValue(SCPT_NotificationSwitches_Config *message);
/**
 * Sets the raw value of an @c SCPT_NotificationSwitches_Config's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_NotificationSwitches_Config_Type_RawValue(SCPT_NotificationSwitches_Config *message, int32_t value);

#pragma mark - SCPT_BindingInfo

typedef GPB_ENUM(SCPT_BindingInfo_FieldNumber) {
  SCPT_BindingInfo_FieldNumber_UserId = 1,
  SCPT_BindingInfo_FieldNumber_Initialized_p = 2,
};

/**
 * 绑定信息
 **/
GPB_FINAL @interface SCPT_BindingInfo : GPBMessage

/** 用户id，0无效 */
@property(nonatomic, readwrite) uint32_t userId;

/** true已初始化，false未初始化 */
@property(nonatomic, readwrite) BOOL initialized_p;

@end

#pragma mark - SCPT_OtaInfo

typedef GPB_ENUM(SCPT_OtaInfo_FieldNumber) {
  SCPT_OtaInfo_FieldNumber_Type = 1,
  SCPT_OtaInfo_FieldNumber_Addr = 2,
  SCPT_OtaInfo_FieldNumber_FileSize = 3,
  SCPT_OtaInfo_FieldNumber_FileCrc = 4,
  SCPT_OtaInfo_FieldNumber_RxSize = 5,
  SCPT_OtaInfo_FieldNumber_Version = 6,
  SCPT_OtaInfo_FieldNumber_Id_p = 7,
  SCPT_OtaInfo_FieldNumber_DecmpSize = 8,
};

/**
 * OTA信息
 **/
GPB_FINAL @interface SCPT_OtaInfo : GPBMessage

/** OTA固件类型 */
@property(nonatomic, readwrite) SCPT_OtaInfo_Type type;

/** 存储地址 */
@property(nonatomic, readwrite) uint32_t addr;

/** 文件大小 */
@property(nonatomic, readwrite) uint32_t fileSize;

/** crc校验值 */
@property(nonatomic, readwrite) uint32_t fileCrc;

/** 已接收长度 */
@property(nonatomic, readwrite) uint32_t rxSize;

/** 版本号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *version;

/** 固件id */
@property(nonatomic, readwrite) uint32_t id_p;

/** 解压后的大小。0代表无需解压 */
@property(nonatomic, readwrite) uint32_t decmpSize;

@end

/**
 * Fetches the raw value of a @c SCPT_OtaInfo's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_OtaInfo_Type_RawValue(SCPT_OtaInfo *message);
/**
 * Sets the raw value of an @c SCPT_OtaInfo's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_OtaInfo_Type_RawValue(SCPT_OtaInfo *message, int32_t value);

#pragma mark - SCPT_GpsDebug

typedef GPB_ENUM(SCPT_GpsDebug_FieldNumber) {
  SCPT_GpsDebug_FieldNumber_Type = 1,
};

/**
 * GPS测试指令
 **/
GPB_FINAL @interface SCPT_GpsDebug : GPBMessage

/** GPS测试操作类型 */
@property(nonatomic, readwrite) SCPT_GpsDebug_Type type;

@end

/**
 * Fetches the raw value of a @c SCPT_GpsDebug's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_GpsDebug_Type_RawValue(SCPT_GpsDebug *message);
/**
 * Sets the raw value of an @c SCPT_GpsDebug's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_GpsDebug_Type_RawValue(SCPT_GpsDebug *message, int32_t value);

#pragma mark - SCPT_CallControl

typedef GPB_ENUM(SCPT_CallControl_FieldNumber) {
  SCPT_CallControl_FieldNumber_Type = 1,
};

GPB_FINAL @interface SCPT_CallControl : GPBMessage

/** 来电操作类型 */
@property(nonatomic, readwrite) SCPT_CallControl_Type type;

@end

/**
 * Fetches the raw value of a @c SCPT_CallControl's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_CallControl_Type_RawValue(SCPT_CallControl *message);
/**
 * Sets the raw value of an @c SCPT_CallControl's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_CallControl_Type_RawValue(SCPT_CallControl *message, int32_t value);

#pragma mark - SCPT_FlashRead

typedef GPB_ENUM(SCPT_FlashRead_FieldNumber) {
  SCPT_FlashRead_FieldNumber_Addr = 1,
  SCPT_FlashRead_FieldNumber_Size = 2,
};

GPB_FINAL @interface SCPT_FlashRead : GPBMessage

@property(nonatomic, readwrite) uint32_t addr;

@property(nonatomic, readwrite) uint32_t size;

@end

#pragma mark - SCPT_Camera

typedef GPB_ENUM(SCPT_Camera_FieldNumber) {
  SCPT_Camera_FieldNumber_State = 1,
};

/**
 * 相机状态
 **/
GPB_FINAL @interface SCPT_Camera : GPBMessage

/** 相机状态 */
@property(nonatomic, readwrite) SCPT_Camera_State state;

@end

/**
 * Fetches the raw value of a @c SCPT_Camera's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_Camera_State_RawValue(SCPT_Camera *message);
/**
 * Sets the raw value of an @c SCPT_Camera's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_Camera_State_RawValue(SCPT_Camera *message, int32_t value);

#pragma mark - SCPT_CameraControll

typedef GPB_ENUM(SCPT_CameraControll_FieldNumber) {
  SCPT_CameraControll_FieldNumber_Type = 1,
};

/**
 * 拍照操作
 **/
GPB_FINAL @interface SCPT_CameraControll : GPBMessage

/** 拍照操作类型 */
@property(nonatomic, readwrite) SCPT_CameraControll_Type type;

@end

/**
 * Fetches the raw value of a @c SCPT_CameraControll's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_CameraControll_Type_RawValue(SCPT_CameraControll *message);
/**
 * Sets the raw value of an @c SCPT_CameraControll's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_CameraControll_Type_RawValue(SCPT_CameraControll *message, int32_t value);

#pragma mark - SCPT_AgpsRequest

typedef GPB_ENUM(SCPT_AgpsRequest_FieldNumber) {
  SCPT_AgpsRequest_FieldNumber_AgpsFlg = 1,
  SCPT_AgpsRequest_FieldNumber_AgpsStamp = 2,
  SCPT_AgpsRequest_FieldNumber_AgpsId = 3,
};

/**
 * AGPS请求指令
 **/
GPB_FINAL @interface SCPT_AgpsRequest : GPBMessage

/** agps是否有效标记 */
@property(nonatomic, readwrite) SCPT_AgpsRequest_Type agpsFlg;

/** agps时间戳 */
@property(nonatomic, readwrite) uint32_t agpsStamp;

/** agps固件id */
@property(nonatomic, readwrite) uint32_t agpsId;

@end

/**
 * Fetches the raw value of a @c SCPT_AgpsRequest's @c agpsFlg property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SCPT_AgpsRequest_AgpsFlg_RawValue(SCPT_AgpsRequest *message);
/**
 * Sets the raw value of an @c SCPT_AgpsRequest's @c agpsFlg property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSCPT_AgpsRequest_AgpsFlg_RawValue(SCPT_AgpsRequest *message, int32_t value);

#pragma mark - SCPT_WatchfaceList

typedef GPB_ENUM(SCPT_WatchfaceList_FieldNumber) {
  SCPT_WatchfaceList_FieldNumber_IdsArray = 1,
};

/**
 * 自定义和在线表盘id列表
 **/
GPB_FINAL @interface SCPT_WatchfaceList : GPBMessage

/** id列表 */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *idsArray;
/** The number of items in @c idsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger idsArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
